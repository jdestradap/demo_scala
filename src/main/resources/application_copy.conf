akka {
  actor {
    provider = "local"  # This is the default provider; use "cluster" for clustered setups
    guardian-supervisor-strategy = "akka.actor.OneForOneStrategy"
    creation-timeout = 30s
    unstarted-push-timeout = 30s
    no-serialization-verification-needed-class-prefix = ["example"]
    supervisor-strategy {
      maxNrOfRetries = 10
      withinTimeRange = 1 minute
      supervisorStrategy = "akka.actor.OneForOneStrategy"
    }
    allow-java-serialization = true  # Enable Java serialization if needed
    serialize-messages = true  # Enable message serialization
    serialize-creators = true  # Serialize actor creation data
    warn-about-java-serialization = true  # Warn about Java serialization usage

    # Commenting out loggers-dispatcher due to version incompatibility
    # loggers-dispatcher {
    #   type = Dispatcher
    #   executor = "thread-pool-executor"
    #   thread-pool-executor {
    #     fixed-pool-size = 4
    #   }
    #   throughput = 1
    # }

    default-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size-min = 4
        fixed-pool-size-max = 8
      }
      throughput = 10
    }
    mailbox {
      type = "akka.dispatch.BoundedMailbox"
      mailbox-capacity = 1000
      mailbox-push-timeout = 30s
    }
    deployment {
      /my-actor {
        router = round-robin-pool
        nr-of-instances = 5
      }
    }
  }
  version = "2.7.0"
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  stdout-loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
}



akka.kafka.consumer {
  kafka-clients {
    bootstrap.servers = ${KAFKA_BOOTSTRAP_SERVERS}
    group.id = "akka-stream-kafka-group"
    auto.offset.reset = "earliest"
  }
}